/*!
 * @author yomotsu http://yomotsu.net/
 * MIT License
 */
var THREEFIELD={};THREEFIELD.normalizeAngle=function(a){return a>=0?a%360:a%360+360},THREEFIELD.howCloseBetweenAngles=function(a,b){var c=Math.min(THREEFIELD.normalizeAngle(a-b),THREEFIELD.normalizeAngle(b-a));return c},THREEFIELD.triangle={},THREEFIELD.triangle.makeBoundingBox=function(a){var b=new THREE.Box3;return b.min=b.min.min(a.a),b.min=b.min.min(a.b),b.min=b.min.min(a.c),b.max=b.max.max(a.a),b.max=b.max.max(a.b),b.max=b.max.max(a.c),b},THREEFIELD.triangle.makeBoundingSphere=function(a,b){var c,d,e,f,g,h,i,j=new THREE.Sphere,k=new THREE.Vector3,l=new THREE.Vector3,m=new THREE.Vector3,n=new THREE.Vector3,o=new THREE.Vector3;return l.subVectors(a.b,a.a),m.subVectors(a.c,a.a),l.dot(m)<=0?(j.center.addVectors(a.b,a.c).divideScalar(2),j.radius=k.subVectors(a.b,a.c).length()/2,j):(l.subVectors(a.a,a.b),m.subVectors(a.c,a.b),l.dot(m)<=0?(j.center.addVectors(a.a,a.c).divideScalar(2),j.radius=k.subVectors(a.a,a.c).length()/2,j):(l.subVectors(a.a,a.c),m.subVectors(a.b,a.c),l.dot(m)<=0?(j.center.addVectors(a.a,a.b).divideScalar(2),j.radius=k.subVectors(a.a,a.b).length()/2,j):(b||(b=a.normal()),l.crossVectors(k.subVectors(a.c,a.b),b),m.crossVectors(k.subVectors(a.c,a.a),b),n.addVectors(a.c,a.b).multiplyScalar(.5),o.addVectors(a.c,a.a).multiplyScalar(.5),c=l.dot(m),d=l.dot(l),f=m.dot(m),e=-k.subVectors(o,n).dot(l),g=-k.subVectors(o,n).dot(m),h=-c*c+d*f,i=(-e*f+c*g)/h,j.center=n.clone().add(l.clone().multiplyScalar(i)),j.radius=k.subVectors(j.center,a.a).length(),j)))},THREEFIELD.World=function(){console.log("THREEFIELD.World"),this.colliders=[],this.characters=[]},THREEFIELD.World.prototype.add=function(a){this.colliders.push(a)},THREEFIELD.World.prototype.addCharacter=function(a){this.characters.push(a)},THREEFIELD.World.prototype.step=function(a){var b,c,d;for(c=0,d=this.characters.length;d>c;c++)b=this.characters[c],sphere=new THREE.Sphere(b.center,b.radius+b.groundPadding),intersectedNodes=octree.getIntersectedNodes(sphere,octree.maxDepth),faces=THREEFIELD.Octree.uniqTriangkesfromNodes(intersectedNodes),b.collisionCandidate=faces,b.update(a)},function(a){"use strict";THREEFIELD.Collider=function(b){var c,d,e,f,g;for(this.mesh=b,this.faces=[],this.normals=[],this.boxes=[],this.sphere=null,this.aabb=null,b.updateMatrix(),b.geometry.applyMatrix(b.matrix),b.matrix.identity(),b.position.set(0,0,0),b.rotation.set(0,0,0),b.scale.set(1,1,1),b.geometry.verticesNeedUpdate=!0,b.updateMatrixWorld(),b.geometry.computeFaceNormals(),b.geometry.computeVertexNormals(),null===b.geometry.boundingSphere&&b.geometry.computeBoundingSphere(),null===b.geometry.boundingBox&&b.geometry.computeBoundingBox(),this.sphere=b.geometry.boundingSphere,this.aabb=b.geometry.boundingBox,c=this.mesh.geometry,f=0,g=c.faces.length;g>f;f++)d=new a.Triangle(c.vertices[c.faces[f].a],c.vertices[c.faces[f].b],c.vertices[c.faces[f].c]),e=c.faces[f].normal,this.faces.push(d),this.normals.push(e),this.boxes.push(THREEFIELD.triangle.makeBoundingBox(d))}}(THREE,THREEFIELD);