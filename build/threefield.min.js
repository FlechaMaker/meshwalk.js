/*!
 * @author yomotsu http://yomotsu.net/
 * MIT License
 */
var THREEFIELD={};THREEFIELD.normalizeAngle=function(a){return a>=0?a%360:a%360+360},THREEFIELD.howCloseBetweenAngles=function(a,b){var c=Math.min(THREEFIELD.normalizeAngle(a-b),THREEFIELD.normalizeAngle(b-a));return c},THREEFIELD.triangle={},THREEFIELD.triangle.makeBoundingBox=function(a){var b=new THREE.Box3;return b.min=b.min.min(a.a),b.min=b.min.min(a.b),b.min=b.min.min(a.c),b.max=b.max.max(a.a),b.max=b.max.max(a.b),b.max=b.max.max(a.c),b},THREEFIELD.triangle.makeBoundingSphere=function(a,b){var c,d,e,f,g,h,i,j=new THREE.Sphere,k=new THREE.Vector3,l=new THREE.Vector3,m=new THREE.Vector3,n=new THREE.Vector3,o=new THREE.Vector3;return l.subVectors(a.b,a.a),m.subVectors(a.c,a.a),l.dot(m)<=0?(j.center.addVectors(a.b,a.c).divideScalar(2),j.radius=k.subVectors(a.b,a.c).length()/2,j):(l.subVectors(a.a,a.b),m.subVectors(a.c,a.b),l.dot(m)<=0?(j.center.addVectors(a.a,a.c).divideScalar(2),j.radius=k.subVectors(a.a,a.c).length()/2,j):(l.subVectors(a.a,a.c),m.subVectors(a.b,a.c),l.dot(m)<=0?(j.center.addVectors(a.a,a.b).divideScalar(2),j.radius=k.subVectors(a.a,a.b).length()/2,j):(b||(b=a.normal()),l.crossVectors(k.subVectors(a.c,a.b),b),m.crossVectors(k.subVectors(a.c,a.a),b),n.addVectors(a.c,a.b).multiplyScalar(.5),o.addVectors(a.c,a.a).multiplyScalar(.5),c=l.dot(m),d=l.dot(l),f=m.dot(m),e=-k.subVectors(o,n).dot(l),g=-k.subVectors(o,n).dot(m),h=-c*c+d*f,i=(-e*f+c*g)/h,j.center=n.clone().add(l.clone().multiplyScalar(i)),j.radius=k.subVectors(j.center,a.a).length(),j)))},THREEFIELD.World=function(){console.log("THREEFIELD.World"),this.colliders=[],this.characters=[]},THREEFIELD.World.prototype.add=function(a){this.colliders.push(a)},THREEFIELD.World.prototype.addCharacter=function(a){this.characters.push(a)},THREEFIELD.World.prototype.step=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;for(h=0,l=this.characters.length;l>h;h++){for(b=this.characters[h],b.update(a),b.contactInfo.length=0,i=0,m=this.colliders.length;m>i;i++)if(c=this.colliders[i],d=THREEFIELD.World.sphereInSphere(b,c.sphere),d&&(e=THREEFIELD.World.sphereInAABB(b.center,b.radius,c.aabb)))for(j=0,n=c.faces.length;n>j;j++)if(e=THREEFIELD.World.sphereInAABB(b.center,b.radius,c.boxes[j]),e&&(f=THREEFIELD.World.sphereVsTriangle(c.faces[j],c.normals[j],b.center,b.radius))){for(g=!1,k=0,o=b.contactInfo.length;o>k;k++)if(b.contactInfo[k].normal.x===f.normal.x&&b.contactInfo[k].normal.y===f.normal.y&&b.contactInfo[k].normal.z===f.normal.z){g=!0;break}g||b.contactInfo.push(f)}b.fixPosition()}},THREEFIELD.World.sphereInAABB=function(a,b,c){var d,e,f=Math.pow(b,2),g=0,h=["x","y","z"];for(e in h)d=h[e],a[d]<c.min[d]?g+=Math.pow(a[d]-c.min[d],2):a[d]>c.max[d]&&(g+=Math.pow(a[d]-c.max[d],2));return f>=g},THREEFIELD.World.sphereInSphere=function(a,b){var c=a.radius+b.radius;return a.center.distanceToSquared(b.center)<=c*c},THREEFIELD.World.sphereVsTriangle=function(a,b,c,d){var e,f,g,h=new THREE.Vector3,i=new THREE.Vector3,j=new THREE.Vector3,k=new THREE.Vector3;if(h.subVectors(a.a,c),i.subVectors(a.b,c),j.subVectors(a.c,c),e=d*d,k.crossVectors(i.clone().sub(h),j.clone().sub(h)),f=h.dot(k),g=k.dot(k),f*f>e*g)return!1;var l,m,n,o,p,q;if(l=h.dot(h),m=h.dot(i),n=h.dot(j),o=i.dot(i),p=i.dot(j),q=j.dot(j),l>e&m>l&n>l||o>e&m>o&p>o||q>e&n>q&p>q)return!1;var r,s,t,u,v,w,x=new THREE.Vector3,y=new THREE.Vector3,z=new THREE.Vector3,A=new THREE.Vector3,B=new THREE.Vector3,C=new THREE.Vector3,D=new THREE.Vector3,E=new THREE.Vector3,F=new THREE.Vector3;if(x.subVectors(i,h),y.subVectors(j,i),z.subVectors(h,j),r=m-l,s=p-o,t=n-q,u=x.dot(x),v=y.dot(y),w=z.dot(z),A.subVectors(h.multiplyScalar(u),x.multiplyScalar(r)),B.subVectors(i.multiplyScalar(v),y.multiplyScalar(s)),C.subVectors(j.multiplyScalar(w),z.multiplyScalar(t)),D.subVectors(j.multiplyScalar(u),A),E.subVectors(h.multiplyScalar(v),B),F.subVectors(i.multiplyScalar(w),C),A.dot(A)>e*u*u&&A.dot(D)>=0||B.dot(B)>e*v*v&&B.dot(E)>=0||C.dot(C)>e*w*w&&C.dot(F)>=0)return!1;var G=Math.sqrt(f*f/g)-d,H=THREEFIELD.World.getContactPoint(b,c,G);return{face:a,normal:b,distance:G,contactPoint:H}},THREEFIELD.World.getContactPoint=function(a,b,c){var d=new THREE.Vector3,e=new THREE.Vector3(-a.x,-a.y,-a.z);return d.copy(b).add(e.multiplyScalar(c)),d},function(a){"use strict";THREEFIELD.Collider=function(b){var c,d,e,f,g;for(this.mesh=b,this.faces=[],this.normals=[],this.boxes=[],this.sphere=null,this.aabb=null,b.updateMatrix(),b.geometry.applyMatrix(b.matrix),b.matrix.identity(),b.position.set(0,0,0),b.rotation.set(0,0,0),b.scale.set(1,1,1),b.geometry.verticesNeedUpdate=!0,b.updateMatrixWorld(),b.geometry.computeFaceNormals(),b.geometry.computeVertexNormals(),null===b.geometry.boundingSphere&&b.geometry.computeBoundingSphere(),null===b.geometry.boundingBox&&b.geometry.computeBoundingBox(),this.sphere=b.geometry.boundingSphere,this.aabb=b.geometry.boundingBox,c=this.mesh.geometry,f=0,g=c.faces.length;g>f;f++)d=new a.Triangle(c.vertices[c.faces[f].a],c.vertices[c.faces[f].b],c.vertices[c.faces[f].c]),e=c.faces[f].normal,this.faces.push(d),this.normals.push(e),this.boxes.push(THREEFIELD.triangle.makeBoundingBox(d))}}(THREE,THREEFIELD);